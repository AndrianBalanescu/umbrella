#!/bin/bash

readonly MODULE="packages/$1"
readonly AUTHOR="Karsten Schmidt"
readonly EMAIL="k+npm@thi.ng"

IFS='-' read -r -a parts <<< "$1"

for i in "${parts[@]}"; do
    INITIAL="$INITIAL${i:0:1}"
done

echo "generating module: $MODULE ($INITIAL)"
mkdir -p "$MODULE"

echo "creating /src /test /bench /dev /export /tools"
mkdir -p "$MODULE"/src "$MODULE"/test "$MODULE"/bench "$MODULE"/dev "$MODULE"/export "$MODULE"/tools

echo "creating index.ts stubs..."
touch "$MODULE"/src/index.ts "$MODULE"/tools/index.ts

cp packages/api/LICENSE "$MODULE"/

echo "writing test skeleton..."
cat << EOF > "$MODULE"/test/index.ts
// import * as assert from "assert";
// import { } from "../src";

describe("$1", () => {
    it("tests pending");
});
EOF

echo "writing bench skeleton..."
cat << EOF > "$MODULE"/bench/index.ts
// import { benchmark } from "@thi.ng/bench";
// import { } from "../src";

const opts = { iter: 1000, warmup: 100 };

benchmark(() => {}, { title: "", ...opts });
EOF

echo "writing package.json..."
cat << EOF > "$MODULE"/package.json
{
    "name": "@thi.ng/$1",
    "version": "0.0.1",
    "description": "TODO",
    "module": "./index.js",
    "main": "./lib/index.js",
    "umd:main": "./lib/index.umd.js",
    "typings": "./index.d.ts",
    "repository": {
        "type": "git",
        "url": "https://github.com/thi-ng/umbrella.git"
    },
    "homepage": "https://github.com/thi-ng/umbrella/tree/master/packages/$1#readme",
    "funding": [
        {
            "type": "github",
            "url": "https://github.com/sponsors/postspectacular"
        },
        {
            "type": "patreon",
            "url": "https://patreon.com/thing_umbrella"
        }
    ],
    "author": "$AUTHOR <$EMAIL>",
    "license": "Apache-2.0",
    "scripts": {
        "build": "yarn clean && yarn build:es6 && node ../../scripts/bundle-module",
        "build:release": "yarn clean && yarn build:es6 && node ../../scripts/bundle-module all",
        "build:es6": "tsc --declaration",
        "build:test": "rimraf build && tsc -p test/tsconfig.json",
        "build:check": "tsc --isolatedModules --noEmit",
        "test": "mocha test",
        "cover": "nyc mocha test && nyc report --reporter=lcov",
        "clean": "rimraf *.js *.d.ts *.map .nyc_output build coverage doc lib",
        "doc:readme": "ts-node -P ../../tools/tsconfig.json ../../tools/src/readme.ts",
        "doc:ae": "mkdir -p .ae/doc .ae/temp && node_modules/.bin/api-extractor run --local --verbose",
        "doc": "node_modules/.bin/typedoc --out doc --theme ../../tools/doc/typedoc-theme src/index.ts",
        "pub": "yarn build:release && yarn publish --access public"
    },
    "devDependencies": {
        "@istanbuljs/nyc-config-typescript": "^1.0.1",
        "@microsoft/api-extractor": "^7.13.1",
        "@types/mocha": "^8.2.0",
        "@types/node": "^14.14.14",
        "mocha": "^8.3.0",
        "nyc": "^15.1.0",
        "ts-node": "^9.1.1",
        "typedoc": "^0.20.30",
        "typescript": "^4.2.3"
    },
    "dependencies": {
        "@thi.ng/api": "^7.1.4"
    },
    "files": [
        "*.js",
        "*.d.ts",
        "lib"
    ],
    "keywords": [
        "typescript"
    ],
    "publishConfig": {
        "access": "public"
    },
    "sideEffects": false,
    "thi.ng": {
        "status": "alpha",
        "year": 2021
    }
}
EOF

echo "writing module tsconfig.json..."
cat << EOF > "$MODULE"/tsconfig.json
{
    "extends": "../../tsconfig.json",
    "compilerOptions": {
        "outDir": "."
    },
    "include": [
        "./src/**/*.ts"
    ]
}
EOF

echo "writing test tsconfig.json..."
cat << EOF > "$MODULE"/test/tsconfig.json
{
    "extends": "../../../tsconfig.json",
    "compilerOptions": {
        "outDir": "../build",
        "module": "commonjs"
    },
    "include": [
        "./**/*.ts",
        "../src/**/*.ts"
    ]
}
EOF

echo "writing bench tsconfig.json..."
cat << EOF > "$MODULE"/bench/tsconfig.json
{
    "extends": "../../../tsconfig.json",
    "compilerOptions": {
        "outDir": "../build",
        "module": "commonjs",
        "noUnusedLocals": false,
        "noUnusedParameters": false
    },
    "include": ["./**/*.ts", "../src/**/*.ts"]
}
EOF

echo "writing tools tsconfig.json..."
cat << EOF > "$MODULE"/tools/tsconfig.json
{
    "extends": "../../../tsconfig.json",
    "compilerOptions": {
        "outDir": "../build",
        "module": "commonjs",
        "noUnusedLocals": false,
        "noUnusedParameters": false
    },
    "include": ["./**/*.ts", "../src/**/*.ts"]
}
EOF

echo "writing api-extractor.json..."
cat << EOF > "$MODULE"/api-extractor.json
{
    "extends": "../../api-extractor.json"
}
EOF

echo "writing tpl.readme.md..."
cat << 'EOF' > "$MODULE"/tpl.readme.md
# ${pkg.banner}

[![npm version](https://img.shields.io/npm/v/${pkg.name}.svg)](https://www.npmjs.com/package/${pkg.name})
![npm downloads](https://img.shields.io/npm/dm/${pkg.name}.svg)
[![Twitter Follow](https://img.shields.io/twitter/follow/thing_umbrella.svg?style=flat-square&label=twitter)](https://twitter.com/thing_umbrella)

This project is part of the
[@thi.ng/umbrella](https://github.com/thi-ng/umbrella/) monorepo.

<!-- TOC -->

## About

${pkg.description}

${status}

${supportPackages}

${relatedPackages}

${blogPosts}

## Installation

${pkg.install}

${pkg.size}

## Dependencies

${pkg.deps}

${examples}

## API

${docLink}

TODO

## Authors

${authors}

${pkg.cite}

## License

&copy; ${copyright} // ${license}
EOF
