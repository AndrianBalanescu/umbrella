/**
 * Generated by @thi.ng/wasm-api at 2022-11-04T13:45:54.418Z - DO NOT EDIT!
 */

// @ts-ignore possibly includes unused imports
import { MemorySlice, Pointer, WasmStringSlice, WasmTypeBase, WasmTypeConstructor } from "@thi.ng/wasm-api";

export interface Task extends WasmTypeBase {
	state: TaskState;
	body: WasmStringSlice;
	/**
	 * WASM type: u32
	 */
	dateCreated: number;
	/**
	 * WASM type: u32
	 */
	dateDone: number;
}

export const $Task: WasmTypeConstructor<Task> = (mem) => ({
	get align() {
		return 4;
	},
	get size() {
		return 20;
	},
	instance: (base) => {
		let $body: WasmStringSlice | null = null;
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 20);
			},
			get state(): TaskState {
				return mem.i32[base >>> 2];
			},
			set state(x: TaskState) {
				mem.i32[base >>> 2] = x;
			},
			get body(): WasmStringSlice {
				return $body || ($body = new WasmStringSlice(mem, (base + 4), true));
			},
			get dateCreated(): number {
				return mem.u32[(base + 12) >>> 2];
			},
			set dateCreated(x: number) {
				mem.u32[(base + 12) >>> 2] = x;
			},
			get dateDone(): number {
				return mem.u32[(base + 16) >>> 2];
			},
			set dateDone(x: number) {
				mem.u32[(base + 16) >>> 2] = x;
			},
		};
	}
});

export enum TaskState {
	OPEN,
	DONE,
}
