/**
 * Generated by @thi.ng/wasm-api at 2022-10-02T18:59:48.748Z - DO NOT EDIT!
 */

// @ts-ignore possibly includes unused imports
import { Pointer, WasmStringSlice, WasmTypeBase, WasmTypeConstructor } from "@thi.ng/wasm-api";

export enum EventType {
	UNKOWN = -1,
	MOUSE,
	TOUCH,
	WHEEL,
	INPUT,
	KEY,
	FOCUS,
	BLUR,
	RESIZE,
}

export enum KeyModifier {
	SHIFT = 1,
	CTRL = 2,
	ALT = 4,
	META = 8,
}

export interface WindowInfo extends WasmTypeBase {
	innerWidth: number;
	innerHeight: number;
	dpr: number;
}

export const $WindowInfo: WasmTypeConstructor<WindowInfo> = (mem) => ({
	get align() {
		return 2;
	},
	get size() {
		return 6;
	},
	instance: (base) => {
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 6);
			},
			get innerWidth(): number {
				return mem.u16[base >>> 1];
			},
			set innerWidth(x: number) {
				mem.u16[base >>> 1] = x;
			},
			get innerHeight(): number {
				return mem.u16[(base + 2) >>> 1];
			},
			set innerHeight(x: number) {
				mem.u16[(base + 2) >>> 1] = x;
			},
			get dpr(): number {
				return mem.u8[(base + 4)];
			},
			set dpr(x: number) {
				mem.u8[(base + 4)] = x;
			},
		};
	}
});

export interface Event extends WasmTypeBase {
	target: number;
	clientX: number;
	clientY: number;
	type: EventType;
	buttons: number;
	modifiers: number;
	key: Uint8Array;
}

export const $Event: WasmTypeConstructor<Event> = (mem) => ({
	get align() {
		return 4;
	},
	get size() {
		return 28;
	},
	instance: (base) => {
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 28);
			},
			get target(): number {
				return mem.i32[base >>> 2];
			},
			set target(x: number) {
				mem.i32[base >>> 2] = x;
			},
			get clientX(): number {
				return mem.u32[(base + 4) >>> 2];
			},
			set clientX(x: number) {
				mem.u32[(base + 4) >>> 2] = x;
			},
			get clientY(): number {
				return mem.u32[(base + 8) >>> 2];
			},
			set clientY(x: number) {
				mem.u32[(base + 8) >>> 2] = x;
			},
			get type(): EventType {
				return mem.i32[(base + 12) >>> 2];
			},
			set type(x: EventType) {
				mem.i32[(base + 12) >>> 2] = x;
			},
			get buttons(): number {
				return mem.u8[(base + 16)];
			},
			set buttons(x: number) {
				mem.u8[(base + 16)] = x;
			},
			get modifiers(): number {
				return mem.u8[(base + 17)];
			},
			set modifiers(x: number) {
				mem.u8[(base + 17)] = x;
			},
			get key(): Uint8Array {
				const addr = (base + 18);
				return mem.u8.subarray(addr, addr + 8);
			},
		};
	}
});

export interface CreateElementOpts extends WasmTypeBase {
	/**
	 * DOM element name
	 */
	tag: WasmStringSlice;
	/**
	 * Parent element ID. If >=0 the new element will be attached to that parent
	 * element. Set to -1 to leave new element unattached
	 */
	parent: number;
	/**
	 * Insertion index for new element or -1 to append (default)
	 */
	index: number;
}

export const $CreateElementOpts: WasmTypeConstructor<CreateElementOpts> = (mem) => ({
	get align() {
		return 4;
	},
	get size() {
		return 16;
	},
	instance: (base) => {
		let $tag: WasmStringSlice | null = null;
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 16);
			},
			get tag(): WasmStringSlice {
				return $tag || ($tag = new WasmStringSlice(mem, base, true));
			},
			get parent(): number {
				return mem.i32[(base + 8) >>> 2];
			},
			set parent(x: number) {
				mem.i32[(base + 8) >>> 2] = x;
			},
			get index(): number {
				return mem.i32[(base + 12) >>> 2];
			},
			set index(x: number) {
				mem.i32[(base + 12) >>> 2] = x;
			},
		};
	}
});

export interface CreateCanvasOpts extends WasmTypeBase {
	width: number;
	height: number;
	/**
	 * Same as CreateElementOpts.parent
	 */
	parent: number;
	/**
	 * Same as CreateElementOpts.index
	 */
	index: number;
	dpr: number;
}

export const $CreateCanvasOpts: WasmTypeConstructor<CreateCanvasOpts> = (mem) => ({
	get align() {
		return 4;
	},
	get size() {
		return 16;
	},
	instance: (base) => {
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 16);
			},
			get width(): number {
				return mem.u16[base >>> 1];
			},
			set width(x: number) {
				mem.u16[base >>> 1] = x;
			},
			get height(): number {
				return mem.u16[(base + 2) >>> 1];
			},
			set height(x: number) {
				mem.u16[(base + 2) >>> 1] = x;
			},
			get parent(): number {
				return mem.i32[(base + 4) >>> 2];
			},
			set parent(x: number) {
				mem.i32[(base + 4) >>> 2] = x;
			},
			get index(): number {
				return mem.i32[(base + 8) >>> 2];
			},
			set index(x: number) {
				mem.i32[(base + 8) >>> 2] = x;
			},
			get dpr(): number {
				return mem.u8[(base + 12)];
			},
			set dpr(x: number) {
				mem.u8[(base + 12)] = x;
			},
		};
	}
});
