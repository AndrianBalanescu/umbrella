/**
 * Generated by @thi.ng/wasm-api at 2022-10-26T12:09:14.824Z - DO NOT EDIT!
 */

// @ts-ignore possibly includes unused imports
import { Pointer, WasmStringSlice, WasmTypeBase, WasmTypeConstructor } from "@thi.ng/wasm-api";

export enum EventType {
	UNKOWN = -1,
	BLUR,
	FOCUS,
	INPUT,
	KEY,
	MOUSE,
	RESIZE,
	TOUCH,
	WHEEL,
}

export enum MouseButton {
	NONE,
	PRIMARY = 1,
	SECONDARY = 2,
	MIDDLE = 4,
}

export enum WheelDeltaMode {
	PIXEL,
	LINE,
	PAGE,
}

export enum KeyModifier {
	SHIFT = 1,
	CTRL = 2,
	ALT = 4,
	META = 8,
}

export interface WindowInfo extends WasmTypeBase {
	innerWidth: number;
	innerHeight: number;
	dpr: number;
}

export const $WindowInfo: WasmTypeConstructor<WindowInfo> = (mem) => ({
	get align() {
		return 2;
	},
	get size() {
		return 6;
	},
	instance: (base) => {
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 6);
			},
			get innerWidth(): number {
				return mem.u16[base >>> 1];
			},
			set innerWidth(x: number) {
				mem.u16[base >>> 1] = x;
			},
			get innerHeight(): number {
				return mem.u16[(base + 2) >>> 1];
			},
			set innerHeight(x: number) {
				mem.u16[(base + 2) >>> 1] = x;
			},
			get dpr(): number {
				return mem.u8[(base + 4)];
			},
			set dpr(x: number) {
				mem.u8[(base + 4)] = x;
			},
		};
	}
});

export interface MouseEvent extends WasmTypeBase {
	/**
	 * Mouse X position in the local space of the element's bounding rect
	 */
	clientX: number;
	/**
	 * Mouse Y position in the local space of the element's bounding rect
	 */
	clientY: number;
	/**
	 * Encoded bitmask of currently pressed modifier keys, see `KeyModifier` enum
	 */
	modifiers: number;
	/**
	 * Encoded bitmask of currently pressed mouse buttons, see `MouseButton` enum
	 */
	buttons: number;
}

export const $MouseEvent: WasmTypeConstructor<MouseEvent> = (mem) => ({
	get align() {
		return 2;
	},
	get size() {
		return 6;
	},
	instance: (base) => {
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 6);
			},
			get clientX(): number {
				return mem.i16[base >>> 1];
			},
			set clientX(x: number) {
				mem.i16[base >>> 1] = x;
			},
			get clientY(): number {
				return mem.i16[(base + 2) >>> 1];
			},
			set clientY(x: number) {
				mem.i16[(base + 2) >>> 1] = x;
			},
			get modifiers(): number {
				return mem.u8[(base + 4)];
			},
			set modifiers(x: number) {
				mem.u8[(base + 4)] = x;
			},
			get buttons(): number {
				return mem.u8[(base + 5)];
			},
			set buttons(x: number) {
				mem.u8[(base + 5)] = x;
			},
		};
	}
});

export interface WheelEvent extends WasmTypeBase {
	/**
	 * Scroll X delta
	 */
	deltaX: number;
	/**
	 * Scroll Y delta
	 */
	deltaY: number;
	/**
	 * Scroll Z delta
	 */
	deltaZ: number;
	/**
	 * Delta mode
	 */
	mode: WheelDeltaMode;
	/**
	 * Encoded bitmask of currently pressed modifier keys, see `KeyModifier` enum
	 */
	modifiers: number;
	/**
	 * Encoded bitmask of currently pressed mouse buttons, see `MouseButton` enum
	 */
	buttons: number;
}

export const $WheelEvent: WasmTypeConstructor<WheelEvent> = (mem) => ({
	get align() {
		return 2;
	},
	get size() {
		return 10;
	},
	instance: (base) => {
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 10);
			},
			get deltaX(): number {
				return mem.i16[base >>> 1];
			},
			set deltaX(x: number) {
				mem.i16[base >>> 1] = x;
			},
			get deltaY(): number {
				return mem.i16[(base + 2) >>> 1];
			},
			set deltaY(x: number) {
				mem.i16[(base + 2) >>> 1] = x;
			},
			get deltaZ(): number {
				return mem.i16[(base + 4) >>> 1];
			},
			set deltaZ(x: number) {
				mem.i16[(base + 4) >>> 1] = x;
			},
			get mode(): WheelDeltaMode {
				return mem.u8[(base + 6)];
			},
			set mode(x: WheelDeltaMode) {
				mem.u8[(base + 6)] = x;
			},
			get modifiers(): number {
				return mem.u8[(base + 7)];
			},
			set modifiers(x: number) {
				mem.u8[(base + 7)] = x;
			},
			get buttons(): number {
				return mem.u8[(base + 8)];
			},
			set buttons(x: number) {
				mem.u8[(base + 8)] = x;
			},
		};
	}
});

export interface TouchEvent extends WasmTypeBase {
	/**
	 * Touch X position in the local space of the element's bounding rect
	 */
	clientX: number;
	/**
	 * Touch Y position in the local space of the element's bounding rect
	 */
	clientY: number;
	/**
	 * Encoded bitmask of currently pressed modifier keys, see `KeyModifier` enum
	 */
	modifiers: number;
}

export const $TouchEvent: WasmTypeConstructor<TouchEvent> = (mem) => ({
	get align() {
		return 2;
	},
	get size() {
		return 6;
	},
	instance: (base) => {
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 6);
			},
			get clientX(): number {
				return mem.i16[base >>> 1];
			},
			set clientX(x: number) {
				mem.i16[base >>> 1] = x;
			},
			get clientY(): number {
				return mem.i16[(base + 2) >>> 1];
			},
			set clientY(x: number) {
				mem.i16[(base + 2) >>> 1] = x;
			},
			get modifiers(): number {
				return mem.u8[(base + 4)];
			},
			set modifiers(x: number) {
				mem.u8[(base + 4)] = x;
			},
		};
	}
});

export interface KeyEvent extends WasmTypeBase {
	/**
	 * Value/name of the key pressed
	 */
	key: Uint8Array;
	/**
	 * Encoded bitmask of currently pressed modifier keys, see `KeyModifier` enum
	 */
	modifiers: number;
}

export const $KeyEvent: WasmTypeConstructor<KeyEvent> = (mem) => ({
	get align() {
		return 1;
	},
	get size() {
		return 17;
	},
	instance: (base) => {
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 17);
			},
			get key(): Uint8Array {
				const addr = base;
				return mem.u8.subarray(addr, addr + 15);
			},
			get modifiers(): number {
				return mem.u8[(base + 16)];
			},
			set modifiers(x: number) {
				mem.u8[(base + 16)] = x;
			},
		};
	}
});

export interface InputEvent extends WasmTypeBase {
	/**
	 * Value of the targeted input element.
	 * The memory is owned by the DOM API and will be freed immediatedly after the
	 * event handler has returned.
	 */
	value: WasmStringSlice;
	/**
	 * Encoded bitmask of currently pressed modifier keys, see `KeyModifier` enum
	 */
	modifiers: number;
}

export const $InputEvent: WasmTypeConstructor<InputEvent> = (mem) => ({
	get align() {
		return 4;
	},
	get size() {
		return 12;
	},
	instance: (base) => {
		let $value: WasmStringSlice | null = null;
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 12);
			},
			get value(): WasmStringSlice {
				return $value || ($value = new WasmStringSlice(mem, base, true));
			},
			get modifiers(): number {
				return mem.u8[(base + 8)];
			},
			set modifiers(x: number) {
				mem.u8[(base + 8)] = x;
			},
		};
	}
});

export interface EventBody extends WasmTypeBase {
	input: InputEvent;
	key: KeyEvent;
	mouse: MouseEvent;
	touch: TouchEvent;
	wheel: WheelEvent;
}

export const $EventBody: WasmTypeConstructor<EventBody> = (mem) => ({
	get align() {
		return 4;
	},
	get size() {
		return 20;
	},
	instance: (base) => {
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 20);
			},
			get input(): InputEvent {
				return $InputEvent(mem).instance(base);
			},
			set input(x: InputEvent) {
				mem.u8.set(x.__bytes, base);
			},
			get key(): KeyEvent {
				return $KeyEvent(mem).instance(base);
			},
			set key(x: KeyEvent) {
				mem.u8.set(x.__bytes, base);
			},
			get mouse(): MouseEvent {
				return $MouseEvent(mem).instance(base);
			},
			set mouse(x: MouseEvent) {
				mem.u8.set(x.__bytes, base);
			},
			get touch(): TouchEvent {
				return $TouchEvent(mem).instance(base);
			},
			set touch(x: TouchEvent) {
				mem.u8.set(x.__bytes, base);
			},
			get wheel(): WheelEvent {
				return $WheelEvent(mem).instance(base);
			},
			set wheel(x: WheelEvent) {
				mem.u8.set(x.__bytes, base);
			},
		};
	}
});

export interface Event extends WasmTypeBase {
	id: EventType;
	/**
	 * Target element ID, positive if a known element, otherwise:
	 * 
	 * - 0: document.body
	 * - -1: window
	 * - -2: = unknown
	 */
	target: number;
	/**
	 * Event details / payload
	 */
	body: EventBody;
}

export const $Event: WasmTypeConstructor<Event> = (mem) => ({
	get align() {
		return 4;
	},
	get size() {
		return 28;
	},
	instance: (base) => {
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 28);
			},
			get id(): EventType {
				return mem.i32[base >>> 2];
			},
			set id(x: EventType) {
				mem.i32[base >>> 2] = x;
			},
			get target(): number {
				return mem.i32[(base + 4) >>> 2];
			},
			set target(x: number) {
				mem.i32[(base + 4) >>> 2] = x;
			},
			get body(): EventBody {
				return $EventBody(mem).instance((base + 8));
			},
			set body(x: EventBody) {
				mem.u8.set(x.__bytes, (base + 8));
			},
		};
	}
});

export interface CreateElementOpts extends WasmTypeBase {
	/**
	 * DOM element name
	 */
	tag: WasmStringSlice;
	/**
	 * ID attrib
	 */
	id: WasmStringSlice;
	/**
	 * Element class attrib
	 */
	class: WasmStringSlice;
	/**
	 * Element inner text body
	 */
	text: WasmStringSlice;
	/**
	 * Element inner HTML body
	 */
	html: WasmStringSlice;
	/**
	 * Parent element ID. If >=0 the new element will be attached to that parent
	 * element. Set to -1 to leave new element unattached
	 */
	parent: number;
	/**
	 * Insertion index for new element or -1 to append (default)
	 */
	index: number;
}

export const $CreateElementOpts: WasmTypeConstructor<CreateElementOpts> = (mem) => ({
	get align() {
		return 4;
	},
	get size() {
		return 48;
	},
	instance: (base) => {
		let $tag: WasmStringSlice | null = null;
		let $id: WasmStringSlice | null = null;
		let $class: WasmStringSlice | null = null;
		let $text: WasmStringSlice | null = null;
		let $html: WasmStringSlice | null = null;
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 48);
			},
			get tag(): WasmStringSlice {
				return $tag || ($tag = new WasmStringSlice(mem, base, true));
			},
			get id(): WasmStringSlice {
				return $id || ($id = new WasmStringSlice(mem, (base + 8), true));
			},
			get class(): WasmStringSlice {
				return $class || ($class = new WasmStringSlice(mem, (base + 16), true));
			},
			get text(): WasmStringSlice {
				return $text || ($text = new WasmStringSlice(mem, (base + 24), true));
			},
			get html(): WasmStringSlice {
				return $html || ($html = new WasmStringSlice(mem, (base + 32), true));
			},
			get parent(): number {
				return mem.i32[(base + 40) >>> 2];
			},
			set parent(x: number) {
				mem.i32[(base + 40) >>> 2] = x;
			},
			get index(): number {
				return mem.i32[(base + 44) >>> 2];
			},
			set index(x: number) {
				mem.i32[(base + 44) >>> 2] = x;
			},
		};
	}
});

export interface CreateCanvasOpts extends WasmTypeBase {
	/**
	 * Canvas width (in CSS pixels)
	 */
	width: number;
	/**
	 * Canvas height (in CSS pixels)
	 */
	height: number;
	/**
	 * Element ID attrib
	 */
	id: WasmStringSlice;
	/**
	 * Element class attrib
	 */
	class: WasmStringSlice;
	/**
	 * Same as CreateElementOpts.parent
	 */
	parent: number;
	/**
	 * Same as CreateElementOpts.index
	 */
	index: number;
	/**
	 * Device pixel ratio for computing physical pixel dimensions, see
	 * `getWindowInfo()`
	 */
	dpr: number;
}

export const $CreateCanvasOpts: WasmTypeConstructor<CreateCanvasOpts> = (mem) => ({
	get align() {
		return 4;
	},
	get size() {
		return 32;
	},
	instance: (base) => {
		let $id: WasmStringSlice | null = null;
		let $class: WasmStringSlice | null = null;
		return {
			get __base() {
				return base;
			},
			get __bytes() {
				return mem.u8.subarray(base, base + 32);
			},
			get width(): number {
				return mem.u16[base >>> 1];
			},
			set width(x: number) {
				mem.u16[base >>> 1] = x;
			},
			get height(): number {
				return mem.u16[(base + 2) >>> 1];
			},
			set height(x: number) {
				mem.u16[(base + 2) >>> 1] = x;
			},
			get id(): WasmStringSlice {
				return $id || ($id = new WasmStringSlice(mem, (base + 4), true));
			},
			get class(): WasmStringSlice {
				return $class || ($class = new WasmStringSlice(mem, (base + 12), true));
			},
			get parent(): number {
				return mem.i32[(base + 20) >>> 2];
			},
			set parent(x: number) {
				mem.i32[(base + 20) >>> 2] = x;
			},
			get index(): number {
				return mem.i32[(base + 24) >>> 2];
			},
			set index(x: number) {
				mem.i32[(base + 24) >>> 2] = x;
			},
			get dpr(): number {
				return mem.u8[(base + 28)];
			},
			set dpr(x: number) {
				mem.u8[(base + 28)] = x;
			},
		};
	}
});
