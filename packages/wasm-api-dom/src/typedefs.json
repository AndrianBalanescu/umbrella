[
	{
		"name": "EventType",
		"type": "enum",
		"tag": "i32",
		"values": [
			{ "name": "unkown", "value": -1 },
			"blur",
			"focus",
			"input",
			"key",
			"mouse",
			"resize",
			"touch",
			"wheel"
		]
	},
	{
		"name": "MouseButton",
		"type": "enum",
		"tag": "u8",
		"values": [
			"none",
			{ "name": "primary", "value": 1 },
			{ "name": "secondary", "value": 2 },
			{ "name": "middle", "value": 4 }
		]
	},
	{
		"name": "WheelDeltaMode",
		"type": "enum",
		"tag": "u8",
		"values": ["pixel", "line", "page"]
	},
	{
		"name": "KeyModifier",
		"type": "enum",
		"tag": "u8",
		"values": [
			{ "name": "shift", "value": 1 },
			{ "name": "ctrl", "value": 2 },
			{ "name": "alt", "value": 4 },
			{ "name": "meta", "value": 8 }
		]
	},
	{
		"name": "WindowInfo",
		"type": "struct",
		"fields": [
			{ "name": "innerWidth", "type": "u16" },
			{ "name": "innerHeight", "type": "u16" },
			{ "name": "dpr", "type": "u8" }
		]
	},
	{
		"name": "MouseEvent",
		"type": "struct",
		"fields": [
			{
				"name": "clientX",
				"type": "i16",
				"doc": "Mouse X position in the local space of the element's bounding rect",
				"default": 0
			},
			{
				"name": "clientY",
				"type": "i16",
				"doc": "Mouse Y position in the local space of the element's bounding rect",
				"default": 0
			},
			{
				"name": "modifiers",
				"type": "u8",
				"doc": "Encoded bitmask of currently pressed modifier keys, see `KeyModifier` enum",
				"default": 0
			},
			{
				"name": "buttons",
				"type": "u8",
				"doc": "Encoded bitmask of currently pressed mouse buttons, see `MouseButton` enum",
				"default": 0
			}
		]
	},
	{
		"name": "WheelEvent",
		"type": "struct",
		"fields": [
			{
				"name": "deltaX",
				"type": "i16",
				"doc": "Scroll X delta",
				"default": 0
			},
			{
				"name": "deltaY",
				"type": "i16",
				"doc": "Scroll Y delta",
				"default": 0
			},
			{
				"name": "deltaZ",
				"type": "i16",
				"doc": "Scroll Z delta",
				"default": 0
			},
			{
				"name": "mode",
				"type": "WheelDeltaMode",
				"doc": "Delta mode"
			},
			{
				"name": "modifiers",
				"type": "u8",
				"doc": "Encoded bitmask of currently pressed modifier keys, see `KeyModifier` enum",
				"default": 0
			},
			{
				"name": "buttons",
				"type": "u8",
				"doc": "Encoded bitmask of currently pressed mouse buttons, see `MouseButton` enum",
				"default": 0
			}
		]
	},
	{
		"name": "TouchEvent",
		"type": "struct",
		"fields": [
			{
				"name": "clientX",
				"type": "i16",
				"doc": "Touch X position in the local space of the element's bounding rect",
				"default": 0
			},
			{
				"name": "clientY",
				"type": "i16",
				"doc": "Touch Y position in the local space of the element's bounding rect",
				"default": 0
			},
			{
				"name": "modifiers",
				"type": "u8",
				"doc": "Encoded bitmask of currently pressed modifier keys, see `KeyModifier` enum",
				"default": 0
			}
		]
	},
	{
		"name": "KeyEvent",
		"type": "struct",
		"fields": [
			{
				"name": "key",
				"type": "u8",
				"tag": "array",
				"len": 15,
				"sentinel": 0,
				"doc": "Value/name of the key pressed"
			},
			{
				"name": "modifiers",
				"type": "u8",
				"doc": "Encoded bitmask of currently pressed modifier keys, see `KeyModifier` enum",
				"default": 0
			}
		],
		"body": {
			"zig": "pub fn getKey(self: *const KeyEvent) []const u8 {\nreturn self.key[0..std.mem.indexOfSentinel(u8, 0, &self.key)];\n}"
		}
	},
	{
		"name": "InputEvent",
		"type": "struct",
		"fields": [
			{
				"name": "value",
				"type": "string",
				"doc": "Value of the targeted input element.\nThe memory is owned by the DOM API and will be freed immediatedly after the event handler has returned."
			},
			{
				"name": "modifiers",
				"type": "u8",
				"doc": "Encoded bitmask of currently pressed modifier keys, see `KeyModifier` enum",
				"default": 0
			}
		]
	},
	{
		"name": "EventBody",
		"type": "union",
		"fields": [
			{ "name": "input", "type": "InputEvent" },
			{ "name": "key", "type": "KeyEvent" },
			{ "name": "mouse", "type": "MouseEvent" },
			{ "name": "touch", "type": "TouchEvent" },
			{ "name": "wheel", "type": "WheelEvent" }
		]
	},
	{
		"name": "Event",
		"type": "struct",
		"fields": [
			{ "name": "id", "type": "EventType" },
			{
				"name": "target",
				"type": "i32",
				"doc": "Target element ID, positive if a known element, otherwise:\n\n- 0: document.body\n- -1: window\n- -2: = unknown"
			},
			{
				"name": "body",
				"type": "EventBody",
				"doc": "Event details / payload"
			}
		]
	},
	{
		"name": "CreateElementOpts",
		"type": "struct",
		"fields": [
			{ "name": "tag", "type": "string", "doc": "DOM element name" },
			{
				"name": "id",
				"type": "string",
				"doc": "ID attrib",
				"default": ""
			},
			{
				"name": "class",
				"type": "string",
				"doc": "Element class attrib",
				"default": ""
			},
			{
				"name": "text",
				"type": "string",
				"doc": "Element inner text body",
				"default": ""
			},
			{
				"name": "html",
				"type": "string",
				"doc": "Element inner HTML body",
				"default": ""
			},
			{
				"name": "parent",
				"type": "i32",
				"doc": "Parent element ID. If >=0 the new element will be attached to that parent element. Set to -1 to leave new element unattached"
			},
			{
				"name": "index",
				"type": "i32",
				"doc": "Insertion index for new element or -1 to append (default)",
				"default": -1
			}
		]
	},
	{
		"name": "CreateCanvasOpts",
		"type": "struct",
		"fields": [
			{
				"name": "width",
				"type": "u16",
				"doc": "Canvas width (in CSS pixels)"
			},
			{
				"name": "height",
				"type": "u16",
				"doc": "Canvas height (in CSS pixels)"
			},
			{
				"name": "id",
				"type": "string",
				"doc": "Element ID attrib",
				"default": ""
			},
			{
				"name": "class",
				"type": "string",
				"doc": "Element class attrib",
				"default": ""
			},
			{
				"name": "parent",
				"type": "i32",
				"doc": "Same as CreateElementOpts.parent"
			},
			{
				"name": "index",
				"type": "i32",
				"doc": "Same as CreateElementOpts.index",
				"default": -1
			},
			{
				"name": "dpr",
				"type": "u8",
				"doc": "Device pixel ratio for computing physical pixel dimensions, see `getWindowInfo()`",
				"default": 1
			}
		]
	}
]
