//! Generated by @thi.ng/wasm-api at 2022-10-04T09:31:43.433Z - DO NOT EDIT!

const std = @import("std");

pub const EventType = enum(i32) {
    UNKOWN = -1,
    MOUSE,
    TOUCH,
    WHEEL,
    INPUT,
    KEY,
    FOCUS,
    BLUR,
    RESIZE,
};

pub const MouseButton = enum(u8) {
    NONE,
    PRIMARY = 1,
    SECONDARY = 2,
    MIDDLE = 4,
};

pub const KeyModifier = enum(u8) {
    SHIFT = 1,
    CTRL = 2,
    ALT = 4,
    META = 8,
};

pub const WindowInfo = struct {
    innerWidth: u16,
    innerHeight: u16,
    dpr: u8,
};

pub const Event = struct {
    type: EventType,
    /// Target element ID, positive if a known element, otherwise:
    /// 
    /// - 0: document.body
    /// - -1: window
    /// - -2: = unknown
    target: i32,
    /// Mouse/touch X position in the local space of the element's bounding rect
    clientX: i16 = 0,
    /// Mouse/touch Y position in the local space of the element's bounding rect
    clientY: i16 = 0,
    /// WHEEL event only, scroll X delta
    deltaX: i16 = 0,
    /// WHEEL event only, scroll Y delta
    deltaY: i16 = 0,
    /// Encoded bitmask of currently pressed mouse buttons, see `MouseButton` enum
    buttons: u8 = 0,
    /// Encoded bitmask of currently pressed modifier keys, see `KeyModifier` enum
    modifiers: u8 = 0,
    /// Value/name of the key pressed
    key: [15:0]u8,
    /// INPUT event only, the value of the targeted input element.
    /// The memory is owned by the DOM API and will be freed immediatedly after the
    /// event handler has returned.
    value: []const u8,
    
    pub fn getKey(self: *const Event) []const u8 {
        return self.key[0..std.mem.indexOfSentinel(u8, 0, &self.key)];
    }
    
};

pub const CreateElementOpts = struct {
    /// DOM element name
    tag: []const u8,
    /// ID attrib
    id: []const u8 = "",
    /// Element class attrib
    class: []const u8 = "",
    /// Element inner text body
    text: []const u8 = "",
    /// Element inner HTML body
    html: []const u8 = "",
    /// Parent element ID. If >=0 the new element will be attached to that parent
    /// element. Set to -1 to leave new element unattached
    parent: i32,
    /// Insertion index for new element or -1 to append (default)
    index: i32 = -1,
};

pub const CreateCanvasOpts = struct {
    /// Canvas width (in CSS pixels)
    width: u16,
    /// Canvas height (in CSS pixels)
    height: u16,
    /// Element ID attrib
    id: []const u8 = "",
    /// Element class attrib
    class: []const u8 = "",
    /// Same as CreateElementOpts.parent
    parent: i32,
    /// Same as CreateElementOpts.index
    index: i32 = -1,
    /// Device pixel ratio for computing physical pixel dimensions, see
    /// `getWindowInfo()`
    dpr: u8 = 1,
};
